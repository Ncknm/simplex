!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.Emitter=e()}}(function(){return function e(t,n,o){function i(f,l){if(!n[f]){if(!t[f]){var u="function"==typeof require&&require;if(!l&&u)return u(f,!0);if(r)return r(f,!0);var s=new Error("Cannot find module '"+f+"'");throw s.code="MODULE_NOT_FOUND",s}var c=n[f]={exports:{}};t[f][0].call(c.exports,function(e){var n=t[f][1][e];return i(n?n:e)},c,c.exports,e,t,n,o)}return n[f].exports}for(var r="function"==typeof require&&require,f=0;f<o.length;f++)i(o[f]);return i}({1:[function(e,t,n){"use strict";var o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")};n.__esModule=!0;var i=function(){function e(){o(this,e)}return e.prototype.on=function(e,t){return this._eventCollection=this._eventCollection||{},this._eventCollection[e]=this._eventCollection[e]||[],this._eventCollection[e].push(t),this},e.prototype.once=function(e,t){function n(){o.off(e,n),t.apply(this,arguments)}var o=this;return n.listener=t,this.on(e,n),this},e.prototype.off=function(e,t){var n=void 0;return this._eventCollection&&(n=this._eventCollection[e])?(n.forEach(function(e,o){e!==t&&e.listener!==t||n.splice(o,1)}),0===n.length&&delete this._eventCollection[e],this):this},e.prototype.emit=function(e){for(var t=this,n=arguments.length,o=Array(n>1?n-1:0),i=1;i<n;i++)o[i-1]=arguments[i];var r=void 0;return this._eventCollection&&(r=this._eventCollection[e])?(r=r.slice(0),r.forEach(function(e){return e.apply(t,o)}),this):this},e}();n["default"]=i,t.exports=n["default"]},{}]},{},[1])(1)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
